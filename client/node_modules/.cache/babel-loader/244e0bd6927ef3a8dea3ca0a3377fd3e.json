{"ast":null,"code":"import titleize from \"titleize\";\nimport moment from \"moment\";\nexport const toUpperCase = value => value ? titleize(value) : \"\";\nexport const getRangeOfDates = (firstDay, lastDay, dateFormat = \"Y/MM/DD\") => {\n  const daysArr = [];\n  let offDay = moment(firstDay, dateFormat);\n  const mLastDay = moment(lastDay, dateFormat);\n\n  while (offDay <= mLastDay) {\n    daysArr.push(offDay.format(dateFormat));\n    offDay.add(1, \"day\");\n  }\n\n  return daysArr;\n}; //input date is string\n\nexport const dateToUTC = (sDate, dateFormat = \"Y/MM/DD\") => {\n  return moment.utc(sDate, dateFormat).format();\n};\nexport const pretifyDate = date => moment(date).format(\"MMM Do YY\");","map":{"version":3,"sources":["C:/Users/ASUS/Project/client/src/helpers/index.js"],"names":["titleize","moment","toUpperCase","value","getRangeOfDates","firstDay","lastDay","dateFormat","daysArr","offDay","mLastDay","push","format","add","dateToUTC","sDate","utc","pretifyDate","date"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAMC,WAAW,GAAGC,KAAK,IAAKA,KAAK,GAAGH,QAAQ,CAACG,KAAD,CAAX,GAAqB,EAAxD;AACP,OAAO,MAAMC,eAAe,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,UAAU,GAAG,SAAjC,KAA+C;AAC5E,QAAMC,OAAO,GAAG,EAAhB;AACA,MAAIC,MAAM,GAAGR,MAAM,CAACI,QAAD,EAAWE,UAAX,CAAnB;AACA,QAAMG,QAAQ,GAAGT,MAAM,CAACK,OAAD,EAAUC,UAAV,CAAvB;;AACA,SAAOE,MAAM,IAAIC,QAAjB,EAA2B;AACzBF,IAAAA,OAAO,CAACG,IAAR,CAAaF,MAAM,CAACG,MAAP,CAAcL,UAAd,CAAb;AACAE,IAAAA,MAAM,CAACI,GAAP,CAAW,CAAX,EAAc,KAAd;AACD;;AACD,SAAOL,OAAP;AACD,CATM,C,CAWP;;AACA,OAAO,MAAMM,SAAS,GAAG,CAACC,KAAD,EAAQR,UAAU,GAAG,SAArB,KAAmC;AAC1D,SAAON,MAAM,CAACe,GAAP,CAAWD,KAAX,EAAkBR,UAAlB,EAA8BK,MAA9B,EAAP;AACD,CAFM;AAIP,OAAO,MAAMK,WAAW,GAAGC,IAAI,IAAIjB,MAAM,CAACiB,IAAD,CAAN,CAAaN,MAAb,CAAoB,WAApB,CAA5B","sourcesContent":["import titleize from \"titleize\";\nimport moment from \"moment\";\n\nexport const toUpperCase = value => (value ? titleize(value) : \"\");\nexport const getRangeOfDates = (firstDay, lastDay, dateFormat = \"Y/MM/DD\") => {\n  const daysArr = [];\n  let offDay = moment(firstDay, dateFormat);\n  const mLastDay = moment(lastDay, dateFormat);\n  while (offDay <= mLastDay) {\n    daysArr.push(offDay.format(dateFormat));\n    offDay.add(1, \"day\");\n  }\n  return daysArr;\n};\n\n//input date is string\nexport const dateToUTC = (sDate, dateFormat = \"Y/MM/DD\") => {\n  return moment.utc(sDate, dateFormat).format();\n};\n\nexport const pretifyDate = date => moment(date).format(\"MMM Do YY\");\n"]},"metadata":{},"sourceType":"module"}